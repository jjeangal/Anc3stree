{
  "address": "0x87424ff4d56d9857f34bfAF559bDbb9bdeCE9eC6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "memberId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        }
      ],
      "name": "addMemberToFamilyTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leftParentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightParentId",
          "type": "uint256"
        }
      ],
      "name": "addParentsToHuman",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "fullName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "birthDate",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "birthPlace",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "deathDate",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "deathPlace",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "leftParentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightParentId",
          "type": "uint256"
        }
      ],
      "name": "createHuman",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "createTree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "humanId",
          "type": "uint256"
        }
      ],
      "name": "getHuman",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "fullName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "birthDate",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "birthPlace",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "deathDate",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "deathPlace",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "leftParentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rightParentId",
              "type": "uint256"
            }
          ],
          "internalType": "struct FamilyTree.Human",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "humans",
      "outputs": [
        {
          "internalType": "string",
          "name": "fullName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "birthDate",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "birthPlace",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "deathDate",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "deathPlace",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "leftParentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightParentId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "familyId",
          "type": "uint256"
        }
      ],
      "name": "printFamily",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "fullName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "birthDate",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "birthPlace",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "deathDate",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "deathPlace",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "leftParentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rightParentId",
              "type": "uint256"
            }
          ],
          "internalType": "struct FamilyTree.Human[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa95a711e97c81e3c844b3f9c2c69431da029ea41dffc8771a6636503f36ef386",
  "receipt": {
    "to": null,
    "from": "0x35620cf0C31482Bf726aF1D409eA38333E460c3a",
    "contractAddress": "0x87424ff4d56d9857f34bfAF559bDbb9bdeCE9eC6",
    "transactionIndex": 0,
    "gasUsed": "53790289",
    "logsBloom": "0x
    "blockHash": "0x1272b3770c7c4b5d486c5ca9076e7fe6463fa30f3373bec7314afc5c009efbfc",
    "transactionHash": "0xa95a711e97c81e3c844b3f9c2c69431da029ea41dffc8771a6636503f36ef386",
    "logs": [],
    "blockNumber": 6691,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7243697f0458b8069f5525ae1300af2f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"}],\"name\":\"addMemberToFamilyTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftParentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightParentId\",\"type\":\"uint256\"}],\"name\":\"addParentsToHuman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthPlace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathPlace\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"leftParentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightParentId\",\"type\":\"uint256\"}],\"name\":\"createHuman\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"createTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"humanId\",\"type\":\"uint256\"}],\"name\":\"getHuman\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthPlace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathPlace\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"leftParentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightParentId\",\"type\":\"uint256\"}],\"internalType\":\"struct FamilyTree.Human\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"humans\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthPlace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathPlace\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"leftParentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightParentId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"familyId\",\"type\":\"uint256\"}],\"name\":\"printFamily\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"fullName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"birthPlace\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathDate\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deathPlace\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"leftParentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightParentId\",\"type\":\"uint256\"}],\"internalType\":\"struct FamilyTree.Human[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol\":\"FamilyTree\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {ArrayUtils} from \\\"./lib/ArrayUtils.sol\\\";\\n\\ncontract FamilyTree {\\n\\n    using ArrayUtils for uint256[];\\n\\n    struct Human {\\n        string fullName;\\n        string birthDate;\\n        string birthPlace;\\n        string deathDate;\\n        string deathPlace;\\n        uint256 leftParentId;\\n        uint256 rightParentId;\\n    }\\n\\n    struct Tree {\\n        uint256[] familyMembersIds;\\n    }\\n\\n    mapping(uint256 => Human) public humans;\\n\\n    mapping(uint256 => Tree) private trees;\\n\\n    mapping(address => uint256) private treeManagers;\\n\\n    mapping(address => uint256) private humanManagers;\\n\\n    constructor() {}\\n\\n    function createHuman(\\n        string calldata fullName,\\n        string calldata birthDate,\\n        string calldata birthPlace,\\n        string calldata deathDate,\\n        string calldata deathPlace,\\n        uint256 leftParentId,\\n        uint256 rightParentId\\n    ) external returns (uint256) {\\n        uint256 id = uint256(keccak256(abi.encodePacked(fullName, birthDate)));\\n        humans[id] = Human(\\n            fullName,\\n            birthDate,\\n            birthPlace,\\n            deathDate,\\n            deathPlace,\\n            leftParentId,\\n            rightParentId\\n        );\\n        humanManagers[msg.sender] = id;\\n        return id;\\n    }\\n\\n    function addParentsToHuman(uint256 id, uint256 leftParentId, uint256 rightParentId) external {\\n        require(humanManagers[msg.sender] == id, \\\"You are not the manager of this human\\\");\\n        Human storage human = humans[id];\\n        human.leftParentId = leftParentId;\\n        human.rightParentId = rightParentId;\\n    }\\n\\n    function getHuman(uint256 humanId) external view returns (Human memory) {\\n        return humans[humanId];\\n    }\\n\\n    function createTree(uint256 id) external returns (uint256) {\\n        uint256[] memory familyMembersIds = new uint256[](0);\\n        familyMembersIds[0] = id;\\n        uint256 treeId = uint256(keccak256(abi.encodePacked(familyMembersIds)));\\n        Tree memory tree = Tree(familyMembersIds);\\n        trees[treeId] = tree;\\n        treeManagers[msg.sender] = treeId;\\n        return treeId;\\n    }\\n\\n    function addMemberToFamilyTree(uint256 memberId, uint256 treeId) external {\\n        require(treeManagers[msg.sender] == treeId, \\\"You are not the manager of this tree\\\");\\n        Tree storage tree = trees[treeId];\\n        tree.familyMembersIds.push(memberId);\\n    }\\n\\n    function printFamily(uint256 familyId) external view returns (Human[] memory) {\\n        // TODO\\n    }\\n}\\n\",\"keccak256\":\"0x30403af52733a2b47930a682806833926ea6f6f696277b0ba1ba89644fce08fd\",\"license\":\"MIT\"},\"chain/FEVM-Hardhat-Kit/contracts/lib/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache License 2.0\\npragma solidity ^0.8.13;\\n\\nlibrary ArrayUtils {\\n    function indexOf(address[] memory _array, address a) internal pure returns (uint256, bool) {\\n        uint256 length = _array.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (_array[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (0, false);\\n    }\\n\\n    function contains(address[] memory _array, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(_array, a);\\n        return isIn;\\n    }\\n\\n    function hasDuplicate(address[] memory _array) internal pure returns (bool) {\\n        require(_array.length > 0, \\\"_array is empty\\\");\\n\\n        for (uint256 i = 0; i < _array.length - 1; i++) {\\n            address current = _array[i];\\n            for (uint256 j = i + 1; j < _array.length; j++) {\\n                if (current == _array[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function remove(address[] memory _array, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(_array, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _newArray,) = pop(_array, index);\\n            return _newArray;\\n        }\\n    }\\n\\n    /**\\n     * @param _array The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage _array, address a) internal {\\n        (uint256 index, bool isIn) = indexOf(_array, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = _array.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) _array[index] = _array[lastIndex];\\n            _array.pop();\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param _array The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory _array, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = _array.length;\\n        require(index < _array.length, \\\"Index must be < _array length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = _array[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = _array[j];\\n        }\\n        return (newAddresses, _array[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param _array The first array\\n     * @param _anotherArray The second array\\n     * @return Returns _array extended by _anotherArray\\n     */\\n    function extend(address[] memory _array, address[] memory _anotherArray)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        uint256 aLength = _array.length;\\n        uint256 bLength = _anotherArray.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = _array[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = _anotherArray[j];\\n        }\\n        return newAddresses;\\n    }\\n}\",\"keccak256\":\"0xc542b6d1b2ebd425efe30b9c6b9abf53d6c63478a0227baaa180736a2645706e\",\"license\":\"Apache License 2.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610db8908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081632bed37c714610a47575080632f93cdf9146109755780633e47a92a146109315780638102fced14610860578063b99bcab0146107c2578063e93366da146107525763f78a40251461006c57600080fd5b3461074d5760e036600319011261074d576004356001600160401b03811161074d5761009c903690600401610cf8565b6024356001600160401b03811161074d576100bb903690600401610cf8565b906044356001600160401b03811161074d576100db903690600401610cf8565b906064356001600160401b03811161074d576100fb903690600401610cf8565b9190926084356001600160401b03811161074d5761011d903690600401610cf8565b95909660405160208101908a8c833780838c82018187602083016000815237016020810160009052038082526020016101569082610c31565b51902099604051996101678b610c16565b369061017292610d25565b8952369061017f92610d25565b6020880152369061018f92610d25565b6040860152369061019f92610d25565b606084015236906101af92610d25565b608082015260a43560a082015260c43560c082015281600052600060205260406000209181519283516001600160401b038111610484576101f08254610bdc565b601f811161071b575b506020601f82116001146106b25781929394956000926106a7575b50508160011b916000199060031b1c19161781555b60208301519283516001600160401b0381116104845761024c6001840154610bdc565b601f8111610672575b506020601f82116001146106035781929394956000926105f8575b50508160011b916000199060031b1c19161760018301555b60408101519283516001600160401b038111610484576102ab6002850154610bdc565b601f81116105c3575b506020601f8211600114610554578192939495600092610549575b50508160011b916000199060031b1c19161760028401555b60608201519283516001600160401b0381116104845761030a6003830154610bdc565b601f8111610514575b506020601f82116001146104a557819293949560009261049a575b50508160011b916000199060031b1c19161760038201555b600481019260808101519384516001600160401b0381116104845760209561036e8354610bdc565b601f8111610449575b508690601f83116001146103dd57918060c09492600696946000926103d2575b50508160011b916000199060031b1c19161790555b60a081015160058501550151910155336000526003825280604060002055604051908152f35b015190503880610397565b90601f1983169184600052886000209260005b81811061043257509260019285926006989660c0989610610419575b505050811b0190556103ac565b015160001960f88460031b161c1916905538808061040c565b92938a6001819287860151815501950193016103f0565b610474908460005288600020601f850160051c8101918a861061047a575b601f0160051c0190610d6b565b38610377565b9091508190610467565b634e487b7160e01b600052604160045260246000fd5b01519050388061032e565b6003830160005260206000209060005b601f19841681106104fc575060019394959683601f198116106104e3575b505050811b016003820155610346565b015160001960f88460031b161c191690553880806104d3565b9091602060018192858b0151815501930191016104b5565b61054390600384016000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b38610313565b0151905038806102cf565b6002850160005260206000209060005b601f19841681106105ab575060019394959683601f19811610610592575b505050811b0160028401556102e7565b015160001960f88460031b161c19169055388080610582565b9091602060018192858b015181550193019101610564565b6105f290600286016000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b386102b4565b015190503880610270565b6001840160005260206000209060005b601f198416811061065a575060019394959683601f19811610610641575b505050811b016001830155610288565b015160001960f88460031b161c19169055388080610631565b9091602060018192858b015181550193019101610613565b6106a190600185016000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b38610255565b015190503880610214565b8260005260206000209060005b601f1984168110610703575060019394959683601f198116106106ea575b505050811b018155610229565b015160001960f88460031b161c191690553880806106dd565b9091602060018192858b0151815501930191016106bf565b61074790836000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b386101f9565b600080fd5b3461074d5760208060031936011261074d57604051818101828252606051809152604082019260408260051b840101916080916000955b8287106107965785850386f35b9091929382806107b2600193603f198a82030186528851610b5e565b9601920196019592919092610789565b3461074d57606036600319011261074d57600435336000526003602052806040600020540361080d576000526000602052604060002060243560058201556006604435910155600080f35b60405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206d616e61676572206f66207468697320604482015264343ab6b0b760d91b6064820152608490fd5b3461074d57602036600319011261074d5760043560005260006020526108ea604060002061088d81610c52565b9061089a60018201610c52565b6109226108a960028401610c52565b6109146108b860038601610c52565b6109066108c760048801610c52565b936108f8600660058a0154990154976040519b8c9b60e08d5260e08d0190610b1e565b908b820360208d0152610b1e565b9089820360408b0152610b1e565b908782036060890152610b1e565b908582036080870152610b1e565b9160a084015260c08301520390f35b3461074d57602036600319011261074d57604051602081016001600160401b038282109111176104845760009052634e487b7160e01b600052603260045260246000fd5b3461074d57604036600319011261074d5760243533600052600260205280604060002054036109f657600052600160205260406000208054906801000000000000000082101561048457600182018082558210156109e0576000526004359060206000200155600080f35b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f596f7520617265206e6f7420746865206d616e61676572206f662074686973206044820152637472656560e01b6064820152608490fd5b3461074d5760208060031936011261074d57610a6282610c16565b600060c0606093848152848482015284604082015284808201528460808201528260a08201520152600435600052600081526006604060002060405193610aa885610c16565b610ab182610c52565b8552610abf60018301610c52565b84860152610acf60028301610c52565b6040860152610ae060038301610c52565b90850152610af060048201610c52565b6080850152600581015460a0850152015460c0830152610b1a604051928284938452830190610b5e565b0390f35b919082519283825260005b848110610b4a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610b29565b9060c080610bc9610bb7610ba5610b93610b81885160e0895260e0890190610b1e565b602089015188820360208a0152610b1e565b60408801518782036040890152610b1e565b60608701518682036060880152610b1e565b60808601518582036080870152610b1e565b9360a081015160a0850152015191015290565b90600182811c92168015610c0c575b6020831014610bf657565b634e487b7160e01b600052602260045260246000fd5b91607f1691610beb565b60e081019081106001600160401b0382111761048457604052565b90601f801991011681019081106001600160401b0382111761048457604052565b9060405191826000825492610c6684610bdc565b908184526001948581169081600014610cd55750600114610c92575b5050610c9092500383610c31565b565b9093915060005260209081600020936000915b818310610cbd575050610c9093508201013880610c82565b85548884018501529485019487945091830191610ca5565b915050610c9094506020925060ff191682840152151560051b8201013880610c82565b9181601f8401121561074d578235916001600160401b03831161074d576020838186019501011161074d57565b9291926001600160401b0382116104845760405191610d4e601f8201601f191660200184610c31565b82948184528183011161074d578281602093846000960137010152565b818110610d76575050565b60008155600101610d6b56fea26469706673582212207e8d6972d78b674115311430b01e0f7feca9a6eff05f913b3b6ece0b700d93e864736f6c63430008110033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081632bed37c714610a47575080632f93cdf9146109755780633e47a92a146109315780638102fced14610860578063b99bcab0146107c2578063e93366da146107525763f78a40251461006c57600080fd5b3461074d5760e036600319011261074d576004356001600160401b03811161074d5761009c903690600401610cf8565b6024356001600160401b03811161074d576100bb903690600401610cf8565b906044356001600160401b03811161074d576100db903690600401610cf8565b906064356001600160401b03811161074d576100fb903690600401610cf8565b9190926084356001600160401b03811161074d5761011d903690600401610cf8565b95909660405160208101908a8c833780838c82018187602083016000815237016020810160009052038082526020016101569082610c31565b51902099604051996101678b610c16565b369061017292610d25565b8952369061017f92610d25565b6020880152369061018f92610d25565b6040860152369061019f92610d25565b606084015236906101af92610d25565b608082015260a43560a082015260c43560c082015281600052600060205260406000209181519283516001600160401b038111610484576101f08254610bdc565b601f811161071b575b506020601f82116001146106b25781929394956000926106a7575b50508160011b916000199060031b1c19161781555b60208301519283516001600160401b0381116104845761024c6001840154610bdc565b601f8111610672575b506020601f82116001146106035781929394956000926105f8575b50508160011b916000199060031b1c19161760018301555b60408101519283516001600160401b038111610484576102ab6002850154610bdc565b601f81116105c3575b506020601f8211600114610554578192939495600092610549575b50508160011b916000199060031b1c19161760028401555b60608201519283516001600160401b0381116104845761030a6003830154610bdc565b601f8111610514575b506020601f82116001146104a557819293949560009261049a575b50508160011b916000199060031b1c19161760038201555b600481019260808101519384516001600160401b0381116104845760209561036e8354610bdc565b601f8111610449575b508690601f83116001146103dd57918060c09492600696946000926103d2575b50508160011b916000199060031b1c19161790555b60a081015160058501550151910155336000526003825280604060002055604051908152f35b015190503880610397565b90601f1983169184600052886000209260005b81811061043257509260019285926006989660c0989610610419575b505050811b0190556103ac565b015160001960f88460031b161c1916905538808061040c565b92938a6001819287860151815501950193016103f0565b610474908460005288600020601f850160051c8101918a861061047a575b601f0160051c0190610d6b565b38610377565b9091508190610467565b634e487b7160e01b600052604160045260246000fd5b01519050388061032e565b6003830160005260206000209060005b601f19841681106104fc575060019394959683601f198116106104e3575b505050811b016003820155610346565b015160001960f88460031b161c191690553880806104d3565b9091602060018192858b0151815501930191016104b5565b61054390600384016000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b38610313565b0151905038806102cf565b6002850160005260206000209060005b601f19841681106105ab575060019394959683601f19811610610592575b505050811b0160028401556102e7565b015160001960f88460031b161c19169055388080610582565b9091602060018192858b015181550193019101610564565b6105f290600286016000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b386102b4565b015190503880610270565b6001840160005260206000209060005b601f198416811061065a575060019394959683601f19811610610641575b505050811b016001830155610288565b015160001960f88460031b161c19169055388080610631565b9091602060018192858b015181550193019101610613565b6106a190600185016000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b38610255565b015190503880610214565b8260005260206000209060005b601f1984168110610703575060019394959683601f198116106106ea575b505050811b018155610229565b015160001960f88460031b161c191690553880806106dd565b9091602060018192858b0151815501930191016106bf565b61074790836000526020600020601f840160051c8101916020851061047a57601f0160051c0190610d6b565b386101f9565b600080fd5b3461074d5760208060031936011261074d57604051818101828252606051809152604082019260408260051b840101916080916000955b8287106107965785850386f35b9091929382806107b2600193603f198a82030186528851610b5e565b9601920196019592919092610789565b3461074d57606036600319011261074d57600435336000526003602052806040600020540361080d576000526000602052604060002060243560058201556006604435910155600080f35b60405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206d616e61676572206f66207468697320604482015264343ab6b0b760d91b6064820152608490fd5b3461074d57602036600319011261074d5760043560005260006020526108ea604060002061088d81610c52565b9061089a60018201610c52565b6109226108a960028401610c52565b6109146108b860038601610c52565b6109066108c760048801610c52565b936108f8600660058a0154990154976040519b8c9b60e08d5260e08d0190610b1e565b908b820360208d0152610b1e565b9089820360408b0152610b1e565b908782036060890152610b1e565b908582036080870152610b1e565b9160a084015260c08301520390f35b3461074d57602036600319011261074d57604051602081016001600160401b038282109111176104845760009052634e487b7160e01b600052603260045260246000fd5b3461074d57604036600319011261074d5760243533600052600260205280604060002054036109f657600052600160205260406000208054906801000000000000000082101561048457600182018082558210156109e0576000526004359060206000200155600080f35b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526024808201527f596f7520617265206e6f7420746865206d616e61676572206f662074686973206044820152637472656560e01b6064820152608490fd5b3461074d5760208060031936011261074d57610a6282610c16565b600060c0606093848152848482015284604082015284808201528460808201528260a08201520152600435600052600081526006604060002060405193610aa885610c16565b610ab182610c52565b8552610abf60018301610c52565b84860152610acf60028301610c52565b6040860152610ae060038301610c52565b90850152610af060048201610c52565b6080850152600581015460a0850152015460c0830152610b1a604051928284938452830190610b5e565b0390f35b919082519283825260005b848110610b4a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610b29565b9060c080610bc9610bb7610ba5610b93610b81885160e0895260e0890190610b1e565b602089015188820360208a0152610b1e565b60408801518782036040890152610b1e565b60608701518682036060880152610b1e565b60808601518582036080870152610b1e565b9360a081015160a0850152015191015290565b90600182811c92168015610c0c575b6020831014610bf657565b634e487b7160e01b600052602260045260246000fd5b91607f1691610beb565b60e081019081106001600160401b0382111761048457604052565b90601f801991011681019081106001600160401b0382111761048457604052565b9060405191826000825492610c6684610bdc565b908184526001948581169081600014610cd55750600114610c92575b5050610c9092500383610c31565b565b9093915060005260209081600020936000915b818310610cbd575050610c9093508201013880610c82565b85548884018501529485019487945091830191610ca5565b915050610c9094506020925060ff191682840152151560051b8201013880610c82565b9181601f8401121561074d578235916001600160401b03831161074d576020838186019501011161074d57565b9291926001600160401b0382116104845760405191610d4e601f8201601f191660200184610c31565b82948184528183011161074d578281602093846000960137010152565b818110610d76575050565b60008155600101610d6b56fea26469706673582212207e8d6972d78b674115311430b01e0f7feca9a6eff05f913b3b6ece0b700d93e864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31,
        "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
        "label": "humans",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Human)22_storage)"
      },
      {
        "astId": 36,
        "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
        "label": "trees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Tree)26_storage)"
      },
      {
        "astId": 40,
        "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
        "label": "treeManagers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 44,
        "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
        "label": "humanManagers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Human)22_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FamilyTree.Human)",
        "numberOfBytes": "32",
        "value": "t_struct(Human)22_storage"
      },
      "t_mapping(t_uint256,t_struct(Tree)26_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FamilyTree.Tree)",
        "numberOfBytes": "32",
        "value": "t_struct(Tree)26_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Human)22_storage": {
        "encoding": "inplace",
        "label": "struct FamilyTree.Human",
        "members": [
          {
            "astId": 9,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "fullName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 11,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "birthDate",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "birthPlace",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 15,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "deathDate",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 17,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "deathPlace",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 19,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "leftParentId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 21,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "rightParentId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Tree)26_storage": {
        "encoding": "inplace",
        "label": "struct FamilyTree.Tree",
        "members": [
          {
            "astId": 25,
            "contract": "chain/FEVM-Hardhat-Kit/contracts/FamilyTree.sol:FamilyTree",
            "label": "familyMembersIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}